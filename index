<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Debt Payoff Calculator: Snowball vs. Avalanche</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        h1, h2, h3, h4 {
            color: #2C3E50;
        }
        .container {
            background: #f9f9f9;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        label {
            display: block;
            margin: 10px 0 5px;
            font-weight: bold;
        }
        input, select {
            width: 100%;
            padding: 8px;
            margin-bottom: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }
        button {
            background: #2980B9;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            margin-top: 10px;
        }
        button:hover {
            background: #3498DB;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        table, th, td {
            border: 1px solid #ddd;
        }
        th, td {
            padding: 12px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        .debt-item {
            background: white;
            padding: 12px;
            margin: 10px 0;
            border-radius: 4px;
            border-left: 4px solid #3498DB;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .delete-btn {
            background: #e74c3c;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
        }
        .delete-btn:hover {
            background: #c0392b;
        }
        .results {
            display: flex;
            justify-content: space-between;
            flex-wrap: wrap;
        }
        .results-panel {
            flex: 1;
            min-width: 300px;
            margin: 10px;
            padding: 15px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .metric {
            margin-bottom: 15px;
        }
        .metric-label {
            color: #7f8c8d;
            font-size: 14px;
        }
        .metric-value {
            font-size: 24px;
            font-weight: bold;
            color: #2C3E50;
        }
        .winner {
            color: #27ae60;
        }
        .highlight {
            color: #e74c3c;
        }
        .hidden {
            display: none;
        }
        .debt-list {
            margin: 20px 0;
        }
        .flex-container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
        }
        .flex-item {
            flex: 1;
            min-width: 250px;
        }
        .info-box {
            background: #d4edff;
            padding: 15px;
            border-radius: 4px;
            margin: 15px 0;
        }
        .test-data-btn {
            background: #95a5a6;
            margin-top: 10px;
        }
        .test-data-btn:hover {
            background: #7f8c8d;
        }
        .difference-highlight {
            font-weight: bold;
            color: #e74c3c;
        }
        .footer {
            margin-top: 30px;
            text-align: center;
            font-size: 0.8em;
            color: #95a5a6;
        }
        @media screen and (max-width: 768px) {
            .results-panel {
                min-width: 100%;
                margin: 10px 0;
            }
            .flex-item {
                min-width: 100%;
            }
        }
    </style>
</head>
<body>
    <h1>Debt Payoff Calculator: Snowball vs. Avalanche</h1>
    
    <div class="container">
        <h2>Add Your Debts</h2>
        
        <div class="flex-container">
            <div class="flex-item">
                <label for="debt-name">Debt Name (e.g., Credit Card, Car Loan)</label>
                <input type="text" id="debt-name" placeholder="Credit Card" required>
                
                <label for="debt-type">Debt Type</label>
                <select id="debt-type">
                    <option value="Credit Card">Credit Card</option>
                    <option value="Loan">Loan</option>
                </select>
            </div>
            
            <div class="flex-item">
                <label for="debt-balance">Current Balance ($)</label>
                <input type="number" id="debt-balance" min="0.01" value="1000" step="100" required>
                
                <label for="debt-interest">Annual Interest Rate (%)</label>
                <input type="number" id="debt-interest" min="0" max="100" value="18" step="0.5" required>
            </div>
        </div>
        
        <label for="debt-payment">Minimum Monthly Payment ($)</label>
        <input type="number" id="debt-payment" min="1" value="50" step="10" required>
        <div class="info-box">
            <p>For credit cards, minimum payment is usually 1-3% of the balance plus interest (calculated automatically).</p>
            <p>For loans, it's the fixed payment amount from your loan agreement.</p>
        </div>
        
        <button id="add-debt-btn">Add Debt</button>
        <button id="add-test-data-btn" class="test-data-btn">Add Example Debts</button>
    </div>
    
    <div id="debt-list-container" class="container hidden">
        <h2>Your Debt List</h2>
        <div id="debt-list" class="debt-list"></div>
        
        <div id="monthly-payment-section">
            <h3>Monthly Payment Budget</h3>
            <p id="minimum-payment-info"></p>
            <label for="monthly-budget">Total Monthly Payment Budget ($)</label>
            <input type="number" id="monthly-budget" min="0" value="100" step="50" required>
            <div class="info-box">This is the total amount you can pay toward all debts each month. Must be at least equal to the sum of all minimum payments.</div>
            
            <button id="calculate-btn">Calculate Payoff Strategies</button>
            <button id="clear-btn">Clear All Debts</button>
        </div>
    </div>
    
    <div id="results-container" class="container hidden">
        <h2>Results Comparison</h2>
        
        <div class="results">
            <div class="results-panel">
                <h3>Snowball Method</h3>
                <div class="metric">
                    <div class="metric-label">Total Interest Paid</div>
                    <div class="metric-value" id="snowball-interest"></div>
                </div>
                <div class="metric">
                    <div class="metric-label">Months to Debt Freedom</div>
                    <div class="metric-value" id="snowball-months"></div>
                </div>
                <div class="metric">
                    <div class="metric-label">Debt Freedom Date</div>
                    <div class="metric-value" id="snowball-date"></div>
                </div>
            </div>
            
            <div class="results-panel">
                <h3>Avalanche Method</h3>
                <div class="metric">
                    <div class="metric-label">Total Interest Paid</div>
                    <div class="metric-value" id="avalanche-interest"></div>
                </div>
                <div class="metric">
                    <div class="metric-label">Months to Debt Freedom</div>
                    <div class="metric-value" id="avalanche-months"></div>
                </div>
                <div class="metric">
                    <div class="metric-label">Debt Freedom Date</div>
                    <div class="metric-value" id="avalanche-date"></div>
                </div>
            </div>
        </div>
        
        <div id="comparison-summary"></div>
        
        <h3>Method Comparison: Snowball vs. Avalanche</h3>
        <div class="flex-container">
            <div class="flex-item">
                <h4>Snowball Method</h4>
                <p>Pays off smallest balances first, giving you psychological wins as debts are eliminated quickly.</p>
                <div id="snowball-order"></div>
            </div>
            <div class="flex-item">
                <h4>Avalanche Method</h4>
                <p>Pays off highest interest rates first, mathematically saving you the most money.</p>
                <div id="avalanche-order"></div>
            </div>
        </div>
    </div>

    <script>
        // Store the debts
        let debts = [];
        let monthlyBudget = 0;
        
        // Format currency
        function formatCurrency(amount) {
            return '$' + parseFloat(amount).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
        }
        
        // Format date
        function formatDate(date) {
            return date.toLocaleString('default', { month: 'long', year: 'numeric' });
        }
        
        // Format percentage
        function formatPercent(rate) {
            return (rate * 100).toFixed(2) + '%';
        }
        
        // Add debt to the list
        document.getElementById('add-debt-btn').addEventListener('click', function() {
            const name = document.getElementById('debt-name').value.trim();
            const type = document.getElementById('debt-type').value;
            const balance = parseFloat(document.getElementById('debt-balance').value);
            const interestRate = parseFloat(document.getElementById('debt-interest').value) / 100; // Convert to decimal
            const minimumPayment = parseFloat(document.getElementById('debt-payment').value);
            
            if (!name || isNaN(balance) || isNaN(minimumPayment) || balance <= 0 || minimumPayment <= 0) {
                alert('Please fill out all fields with valid values.');
                return;
            }
            
            // Validate minimum payment is sufficient
            let minRequired = 0;
            if (type === "Credit Card") {
                // Credit cards usually require at least interest + 1% of principal
                minRequired = (balance * interestRate / 12) + (balance * 0.01);
                if (minimumPayment < minRequired) {
                    if (!confirm(`The minimum payment for this credit card should be at least ${formatCurrency(minRequired)}. Continue anyway?`)) {
                        return;
                    }
                }
            } else {
                // For loans, check if payment covers at least interest
                minRequired = balance * interestRate / 12;
                if (minimumPayment <= minRequired) {
                    alert(`For this loan, the minimum payment must be greater than the monthly interest of ${formatCurrency(minRequired)}.`);
                    return;
                }
            }
            
            debts.push({
                name: name,
                type: type,
                balance: balance,
                interest_rate: interestRate,
                minimum_payment: minimumPayment
            });
            
            updateDebtList();
            clearDebtForm();
            
            // Focus on the name field for the next debt
            document.getElementById('debt-name').focus();
        });
        
        // Clear the debt form
        function clearDebtForm() {
            document.getElementById('debt-name').value = '';
            document.getElementById('debt-balance').value = '1000';
            document.getElementById('debt-interest').value = '18';
            document.getElementById('debt-payment').value = '50';
        }
        
        // Add test data button
        document.getElementById('add-test-data-btn').addEventListener('click', function() {
            // Enhanced test data to show significant differences
            debts = [
                {
                    name: "High Interest Credit Card",
                    type: "Credit Card",
                    balance: 5000,
                    interest_rate: 0.249, // 24.9%
                    minimum_payment: 150
                },
                {
                    name: "Low Interest Auto Loan", 
                    type: "Loan",
                    balance: 15000,
                    interest_rate: 0.049, // 4.9%
                    minimum_payment: 300
                },
                {
                    name: "Medium Interest Credit Card",
                    type: "Credit Card",
                    balance: 2500,
                    interest_rate: 0.179, // 17.9%
                    minimum_payment: 75
                },
                {
                    name: "Personal Loan",
                    type: "Loan",
                    balance: 8000,
                    interest_rate: 0.099, // 9.9%
                    minimum_payment: 220
                }
            ];
            
            updateDebtList();
            
            // Set a budget that allows significant extra payments
            const totalMinimum = debts.reduce((sum, debt) => sum + debt.minimum_payment, 0);
            document.getElementById('monthly-budget').value = Math.round(totalMinimum * 1.5);
        });
        
        // Update the debt list display
        function updateDebtList() {
            const debtListElement = document.getElementById('debt-list');
            debtListElement.innerHTML = '';
            
            // Show the debt list container if there are debts
            if (debts.length > 0) {
                document.getElementById('debt-list-container').classList.remove('hidden');
            } else {
                document.getElementById('debt-list-container').classList.add('hidden');
                document.getElementById('results-container').classList.add('hidden');
                return;
            }
            
            // Calculate total minimum payment
            const totalMinPayment = debts.reduce((sum, debt) => sum + debt.minimum_payment, 0);
            document.getElementById('minimum-payment-info').textContent = 
                `Total Minimum Monthly Payment: ${formatCurrency(totalMinPayment)}`;
            
            // Set the budget input minimum and default value
            const budgetInput = document.getElementById('monthly-budget');
            budgetInput.min = totalMinPayment;
            if (parseFloat(budgetInput.value) < totalMinPayment) {
                budgetInput.value = Math.max(totalMinPayment * 1.5, totalMinPayment + 200).toFixed(0);
            }
            
            // Display each debt
            debts.forEach((debt, index) => {
                const debtItem = document.createElement('div');
                debtItem.className = 'debt-item';
                debtItem.innerHTML = `
                    <div>
                        <strong>${debt.name}</strong> (${debt.type})<br>
                        Balance: ${formatCurrency(debt.balance)} | 
                        Rate: ${formatPercent(debt.interest_rate)} | 
                        Payment: ${formatCurrency(debt.minimum_payment)}
                    </div>
                    <button class="delete-btn" data-index="${index}">Delete</button>
                `;
                debtListElement.appendChild(debtItem);
            });
            
            // Add delete event listeners
            document.querySelectorAll('.delete-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const index = parseInt(this.getAttribute('data-index'));
                    debts.splice(index, 1);
                    updateDebtList();
                });
            });
        }
        
        // Clear all debts
        document.getElementById('clear-btn').addEventListener('click', function() {
            if (confirm('Are you sure you want to clear all debts?')) {
                debts = [];
                updateDebtList();
            }
        });
        
        // Calculate button click
        document.getElementById('calculate-btn').addEventListener('click', function() {
            monthlyBudget = parseFloat(document.getElementById('monthly-budget').value);
            const totalMinPayment = debts.reduce((sum, debt) => sum + debt.minimum_payment, 0);
            
            if (monthlyBudget < totalMinPayment) {
                alert('Your monthly budget must be at least equal to the sum of minimum payments.');
                return;
            }
            
            // Make copies of the debt array for each strategy
            const snowballDebts = JSON.parse(JSON.stringify(debts));
            const avalancheDebts = JSON.parse(JSON.stringify(debts));
            
            // Sort for Snowball (smallest balance first)
            snowballDebts.sort((a, b) => a.balance - b.balance);
            
            // Sort for Avalanche (highest interest rate first)
            avalancheDebts.sort((a, b) => b.interest_rate - a.interest_rate);
            
            // Run the simulations
            const snowballResults = runDebtPayoffSimulation(snowballDebts, monthlyBudget, 'snowball');
            const avalancheResults = runDebtPayoffSimulation(avalancheDebts, monthlyBudget, 'avalanche');
            
            // Display the results
            displayResults(snowballResults, avalancheResults);
        });
        
        // Run a debt payoff simulation
        function runDebtPayoffSimulation(sortedDebts, monthlyBudget, strategyName) {
            // Create copies of the debts to work with
            const workingDebts = sortedDebts.map(debt => ({
                ...debt,
                originalBalance: debt.balance,
                paid: false,
                payoffMonth: null,
                totalInterestPaid: 0
            }));
            
            let month = 0;
            let totalInterest = 0;
            let payoffSchedule = [];
            
            // Continue until all debts are paid
            while (workingDebts.some(debt => !debt.paid)) {
                month++;
                let availablePayment = monthlyBudget;
                
                // First, apply minimum payments and calculate interest
                for (let i = 0; i < workingDebts.length; i++) {
                    const debt = workingDebts[i];
                    
                    if (debt.paid) continue;
                    
                    // Calculate interest for this month
                    let monthlyInterest = 0;
                    
                    if (debt.type === "Credit Card") {
                        // Credit card: interest on the starting balance
                        monthlyInterest = debt.balance * (debt.interest_rate / 12);
                        debt.balance += monthlyInterest; // Add interest to balance
                    } else {
                        // Loan: interest is part of the payment
                        monthlyInterest = debt.balance * (debt.interest_rate / 12);
                    }
                    
                    // Track interest
                    debt.totalInterestPaid += monthlyInterest;
                    totalInterest += monthlyInterest;
                    
                    // Apply minimum payment
                    let paymentToApply = Math.min(debt.minimum_payment, debt.balance);
                    
                    if (debt.type === "Credit Card") {
                        // Credit card: payment directly reduces balance
                        debt.balance -= paymentToApply;
                    } else {
                        // Loan: payment covers interest first, then principal
                        const principalPayment = Math.max(0, paymentToApply - monthlyInterest);
                        debt.balance -= principalPayment;
                    }
                    
                    availablePayment -= paymentToApply;
                    
                    // Check if debt is paid off by minimum payment
                    if (debt.balance <= 0.01) {
                        debt.balance = 0;
                        debt.paid = true;
                        debt.payoffMonth = month;
                        payoffSchedule.push({
                            name: debt.name,
                            balance: debt.originalBalance,
                            interest_rate: debt.interest_rate,
                            interest_paid: debt.totalInterestPaid,
                            month: month,
                            type: debt.type
                        });
                    }
                }
                
                // Apply any extra payment to the highest priority debt
                while (availablePayment > 0) {
                    // Find the first unpaid debt (based on the sorting strategy)
                    const targetDebt = workingDebts.find(debt => !debt.paid);
                    
                    if (!targetDebt) break; // No more debts to pay
                    
                    // Apply extra payment
                    const extraPayment = Math.min(availablePayment, targetDebt.balance);
                    targetDebt.balance -= extraPayment;
                    availablePayment -= extraPayment;
                    
                    // Check if debt is now paid off
                    if (targetDebt.balance <= 0.01) {
                        targetDebt.balance = 0;
                        targetDebt.paid = true;
                        targetDebt.payoffMonth = month;
                        payoffSchedule.push({
                            name: targetDebt.name,
                            balance: targetDebt.originalBalance,
                            interest_rate: targetDebt.interest_rate,
                            interest_paid: targetDebt.totalInterestPaid,
                            month: month,
                            type: targetDebt.type
                        });
                    }
                    
                    // If we've paid off the target debt and still have money, continue to the next one
                }
            }
            
            // Sort payoff schedule by payoff month
            payoffSchedule.sort((a, b) => a.month - b.month);
            
            // Calculate freedom date
            const today = new Date();
            const payoffDate = new Date(today);
            payoffDate.setMonth(today.getMonth() + month);
            
            return {
                strategy: strategyName,
                totalMonths: month,
                totalInterestPaid: totalInterest,
                payoffDate: payoffDate,
                payoffSchedule: payoffSchedule
            };
        }
        
        // Display results
        function displayResults(snowball, avalanche) {
            // Show results container
            document.getElementById('results-container').classList.remove('hidden');
            
            // Display metrics
            document.getElementById('snowball-interest').textContent = formatCurrency(snowball.totalInterestPaid);
            document.getElementById('snowball-months').textContent = snowball.totalMonths;
            document.getElementById('snowball-date').textContent = formatDate(snowball.payoffDate);
            
            document.getElementById('avalanche-interest').textContent = formatCurrency(avalanche.totalInterestPaid);
            document.getElementById('avalanche-months').textContent = avalanche.totalMonths;
            document.getElementById('avalanche-date').textContent = formatDate(avalanche.payoffDate);
            
            // Display payoff order
            const snowballOrder = document.getElementById('snowball-order');
            snowballOrder.innerHTML = '<h5>Payoff Order:</h5><ol>';
            snowball.payoffSchedule.forEach(debt => {
                snowballOrder.innerHTML += `
                    <li>${debt.name} - ${formatCurrency(debt.balance)} 
                    <span class="highlight">(${formatPercent(debt.interest_rate)})</span> 
                    - Month ${debt.month}</li>
                `;
            });
            snowballOrder.innerHTML += '</ol>';
            
            const avalancheOrder = document.getElementById('avalanche-order');
            avalancheOrder.innerHTML = '<h5>Payoff Order:</h5><ol>';
            avalanche.payoffSchedule.forEach(debt => {
                avalancheOrder.innerHTML += `
                    <li>${debt.name} - ${formatCurrency(debt.balance)} 
                    <span class="highlight">(${formatPercent(debt.interest_rate)})</span> 
                    - Month ${debt.month}</li>
                `;
            });
            avalancheOrder.innerHTML += '</ol>';
            
            // Compare the methods
            const interestDiff = Math.abs(snowball.totalInterestPaid - avalanche.totalInterestPaid);
            const timeDiff = Math.abs(snowball.totalMonths - avalanche.totalMonths);
            const interestPercent = Math.round((interestDiff / Math.max(snowball.totalInterestPaid, avalanche.totalInterestPaid)) * 100);
            
            let summaryHTML = '<div class="info-box">';
            
            if (interestDiff > 1) { // More than $1 difference
                const betterMethod = avalanche.totalInterestPaid < snowball.totalInterestPaid ? 'Avalanche' : 'Snowball';
                const worseMethod = betterMethod === 'Avalanche' ? 'Snowball' : 'Avalanche';
                summaryHTML += `
                    <p><strong>The ${betterMethod} method saves you 
                    <span class="difference-highlight">${formatCurrency(interestDiff)}</span> 
                    in interest compared to the ${worseMethod} method. 
                    (${interestPercent}% less)</strong></p>
                `;
            } else {
                summaryHTML += '<p>Both methods result in nearly identical interest paid.</p>';
            }
            
            if (timeDiff > 0) {
                const fasterMethod = avalanche.totalMonths < snowball.totalMonths ? 'Avalanche' : 'Snowball';
                const slowerMethod = fasterMethod === 'Avalanche' ? 'Snowball' : 'Avalanche';
                summaryHTML += `
                    <p><strong>The ${fasterMethod} method gets you debt-free 
                    <span class="difference-highlight">${timeDiff} month${timeDiff > 1 ? 's' : ''}</span> 
                    sooner than the ${slowerMethod} method.</strong></p>
                `;
            } else {
                summaryHTML += '<p>Both methods take the same amount of time to pay off all debts.</p>';
            }
            
            summaryHTML += '</div>';
            document.getElementById('comparison-summary').innerHTML = summaryHTML;
        }
    </script>
    
    <div class="footer">
        <p>Financial freedom calculator - results are for educational purposes only.</p>
    </div>
</body>
</html>
